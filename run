#!/usr/bin/env ruby

current_dir = File.dirname(__FILE__)
# set load path (similar to how gems require files (relative to lib))

lib = current_dir + '/lib/'
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require current_dir + '/lib/meshchat'

module Debug
  class CLIInput < MeshChat::CLI::Base
    class << self
      def autocompletes
        commands = MeshChat::CLI::COMMAND_MAP.map { |k, _v| "/#{k}" }
        aliases = MeshChat::Node.all.map { |n| "#{n.alias_name}" }
        commands + aliases
      end
    end

    # called every time meshchat wants a line of text from the user
    def get_input
      # update auto completion
      completion = proc { |s| self.class.autocompletes.grep(/^#{Regexp.escape(s)}/) }
      Readline.completion_proc = completion

      Readline.readline('> ', true)
    end
  end
end

module Debug
  class CLIOutput < MeshChat::Display::Base
    def start
      puts "\n"
      alert 'Welcome to Spiced Rumby!'
      puts "\n"
      puts "\n"
    end

    # TODO: find a more elegant way to handle color
    def add_line(line)
      puts line
    end

    def info(msg)
      puts msg.colorize(:light_black)
    end

    def warning(msg)
      puts msg.colorize(:yellow)
    end

    def alert(msg)
      puts msg.colorize(:red)
    end

    def success(msg)
      puts msg.colorize(:green)
    end

    def chat(msg)
      words = msg.split(' ')
      time = words[0..1]
      name = words[2]
      message = words[3..words.length]

      print (time.join(' ') + ' ').colorize(:light_magenta)
      print (name + ' ').colorize(:cyan)
      print message.join(' ') + "\n"
    end

    def whisper(msg)
      words = msg.split(' ')
      time = words[0..1]
      name = words[2]
      message = words[3..words.length]

      print (time.join(' ') + ' ').colorize(:magenta)
      print (name + ' ').colorize(:light_black)
      print message.join(' ') + "\n"
    end
  end
end


MeshChat.start(
  display: Debug::CLIOutput, # your class implementing `Display::Base`
  input: Debug::CLIInput, # your class implementing `CLI::Base`
)
